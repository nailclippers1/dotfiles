# dein.toml
# ======================================
# general

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'markonm/traces.vim'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_add = '''
    map <Leader> <Plug>(easymotion-prefix)
    let g:EasyMotion_do_mapping = 0 " Disable default mappings
    " Jump to anywhere you want with minimal keystrokes, with just one key binding.
    " `s{char}{label}`
    " nmap s <Plug>(easymotion-overwin-f)
    " or
    " `s{char}{char}{label}`
    " Need one more keystroke, but on average, it may be more comfortable.
    nmap s <Plug>(easymotion-overwin-f2)
    " Turn on case insensitive feature
    let g:EasyMotion_smartcase = 1
    " JK motions: Line motions
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_char_list = ['|', '¦', '┆', '┊']
    let g:indentLine_faster = 1
'''

[[plugins]]
repo = 'mattn/googlesuggest-complete-vim'
hook_add = '''
    set completefunc=GoogleComplete
    function! GoogleComplete(findstart, base)
    if a:findstart
        let line = getline('.')
        let start = col('.') - 1
        while start > 0 && line[start - 1] =~ '\S'
            let start -= 1
        endwhile
        return start
    else
        let ret = system('curl -s -G --data-urlencode "q='
                    \ . a:base . '" "http://suggestqueries.google.com/complete/search?&client=firefox&hl=ja&ie=utf8&oe=utf8"')
        let res = split(substitute(ret,'\[\|\]\|"',"","g"),",")
        return res
    endif
endfunction
'''

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'BurntSushi/ripgrep'

# ======================================
# fonts and colors

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    colo hybrid
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set laststatus=2
    set noshowmode
    let g:lightline = { 
    \  'colorscheme': 'powerline',
    \  'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
    \  'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
    \}
'''

[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

# ======================================
# fuzzy finder (fzf)

[[plugins]]
repo = 'junegunn/fzf'
build = './install --bin'
merged = '0'

[[plugins]]
repo = 'junegunn/fzf.vim'
on_cmd = [
    'Files',
    'Buffers',
    'Colors',
    'History',
    'Tags',
    'Rg',
]
hook_add = '''
    nnoremap <silent> ,f :<C-u>Files<CR>
    nnoremap <silent> ,b :<C-u>Buffers<CR>
    nnoremap <silent> ,m :<C-u>History<CR>
    nnoremap <silent> ,r :<C-u>Rg<CR>
'''

# =====================================
# fuzzy finder (ddu)

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_source = '''

"ddu settings.
call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [{'name':'file','params':{}},{'name':'mr'},{'name':'register'},{'name':'buffer'}],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'sourceParams': {
    \     'rg': {
    \       'args': ['--column', '--no-heading', '--color', 'never'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \ })

"ddu-key-setting
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWinow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>close<CR>
endfunction

"ddu keymapping.
"nnoremap <SID>[ug] <Nop>
"nmap ; <SID>[ug]

nnoremap <silent> <Leader>m :<C-u>Ddu mr<CR>
nnoremap <silent> <Leader>b :<C-u>Ddu buffer<CR>
nnoremap <silent> <Leader>r :<C-u>Ddu register<CR>
nnoremap <silent> <Leader>n :<C-u>Ddu file -source-param-new -volatile<CR>
nnoremap <silent> <Leader>f :<C-u>Ddu file<CR>

nmap <silent> ;g <Cmd>call ddu#start({
\   'name': 'grep',
\   'sources':[
\     {'name': 'rg', 'params': {'input': expand('<cword>')}}
\   ],
\ })<CR>
'''

#ddu source
[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'

#ddu ui
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

#ddu kind
[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'

#ddu filter
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'


