# dein_lazy.toml
# ======================================
# vim syntax for TOML

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

# ======================================
# markdown

[[plugins]]
repo = 'junegunn/goyo.vim'
on_ft = ['md', 'markdown']
hook_add = '''
    autocmd! User GoyoEnter Limelight 0.7
    autocmd! User GoyoLeave Limelight!
'''

[[plugins]]
repo = 'junegunn/limelight.vim'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['md', 'markdown']
hook_add = '''
    let g:vim_markdown_folding_disabled = 1
    let g:vim_markdown_auto_insert_bullets = 0
    let g:vim_markdown_new_list_item_indent = 0
'''

[[plugins]]
repo = 'kannokanno/previm'
on_source = ['vim-markdown']
hook_add = '''
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    "let g:previm_open_cmd = 'C:\\Program\ Files\\Google\\Chrome\\Application\\chrome.exe'
    let g:previm_open_cmd = 'C:\\Program\ Files\\Mozilla\ Firefox\\firefox.exe'
    "let g:previm_wsl_mode = 1
    nnoremap <silent> <C-p> :PrevimOpen<CR>
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
    let g:netrw_nogx = 1 " disable netrw's gx mapping.
    nmap gx <Plug>(openbrowser-smart-search)
    vmap gx <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'
on_source = ['vim-markdown']
hook_add ='''
    function! s:isAtStartOfLine(mapping)
      let text_before_cursor = getline('.')[0 : col('.')-1]
      let mapping_pattern = '\V' . escape(a:mapping, '\')
      let comment_pattern = '\V' . escape(substitute(&l:commentstring, '%s.*$', '', ''), '\')
      return (text_before_cursor =~? '^' . ('\v(' . comment_pattern . '\v)?') . '\s*\v' . mapping_pattern . '\v$')
    endfunction
    
    inoreabbrev <expr> <bar><bar>
              \ <SID>isAtStartOfLine('\|\|') ?
              \ '<c-o>:TableModeEnable<cr><bar><space><bar><left><left>' : '<bar><bar>'
    inoreabbrev <expr> __
              \ <SID>isAtStartOfLine('__') ?
              \ '<c-o>:silent! TableModeDisable<cr>' : '__'
'''

# ======================================
# Vimwiki for Zettelkasten, LYT note-taking system

[[plugins]]
repo = 'vimwiki/vimwiki'
#on_source = ['vim-markdown']
on_map = {n = '<Plug>'}
#on_cmd = ['VimwikiIndex']
hook_add = '''
    let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
    let g:vimwiki_list = [{'path': '~/vimwiki/', 'syntax':'markdown', 'ext':'.md'}]
    let g:vimwiki_use_mouse = 1
    let g:vimwiki_folding = 'expr'
    let g:vimwiki_auto_chdir = 1
    let g:vimwiki_markdown_link_ext = 1
    nmap ww <Plug>(vimwiki)
'''

[[plugins]]
repo = 'michal-h21/vim-zettel'
on_source = ['vimwiki']
hook_add = '''
    let g:zettel_format = '%title'
'''

# ======================================
# calendar

[[plugins]]
repo = 'itchyny/calendar.vim'
on_cmd = ['Calendar']
hook_add = '''
    let g:calendar_google_calendar = 1
    let g:calendar_google_task = 1
'''

# ======================================
# command completion

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
    call ddc#custom#patch_global('sources', [
         \ 'around',
         \ 'nvim-lsp',
         \ 'file',
         \ ])
    call ddc#custom#patch_global('sourceOptions', {
         \ '_': {
         \   'matchers': ['matcher_head'],
         \   'sorters': ['sorter_rank'],
         \   'converters': ['converter_remove_overlap'],
         \ },
         \ 'around': {'mark': 'Around'},
         \   'nvim-lsp': {
         \   'mark': 'LSP',
         \   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
         \ },
         \ 'file': {
         \   'mark': 'file',
         \   'isVolatile': v:true,
         \   'forceCompletionPattern': '\S/\S*'
         \ }})
    
    call ddc#custom#patch_global('sourceParams', {
         \ 'around': {'maxSize': 500},
         \ })
     
    inoremap <silent><expr> <TAB>
         \ ddc#map#pum_visible() ? '<C-n>' :
         \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
         \ '<TAB>' : ddc#map#manual_complete()
    inoremap <expr><S-TAB>  ddc#map#pum_visible() ? '<C-p>' : '<C-h>'
    
    call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-nvim-lsp'
on_source = 'ddc.vim'

# dictionary sources

[[plugins]]
repo = 'matsui54/ddc-dictionary'
on_source = 'ddc.vim'

# =====================================
# fuzzy finder

[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_source = '''

"ddu settings.
call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [{'name':'file','params':{}},{'name':'mr'},{'name':'register'},{'name':'buffer'}],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \ })

"ddu-key-setting
autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWinow')<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>close<CR>
endfunction

"ddu keymapping.
nnoremap <SID>[ug] <Nop>
nmap ; <SID>[ug]

nnoremap <silent> <SID>[ug]m :<C-u>Ddu mr<CR>
nnoremap <silent> <SID>[ug]b :<C-u>Ddu buffer<CR>
nnoremap <silent> <SID>[ug]r :<C-u>Ddu register<CR>
nnoremap <silent> <SID>[ug]n :<C-u>Ddu file -source-param-new -volatile<CR>
nnoremap <silent> <SID>[ug]f :<C-u>Ddu file<CR>

'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-register'
on_source = 'ddu.vim'

[[plugins]]
repo = 'kuuote/ddu-source-mr'
on_source = 'ddu.vim'

[[plugins]]
repo = 'lambdalisue/mr.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-commands.vim'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'


